// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/event"
	"edumeet/ent/predicate"
	"edumeet/ent/remoteevent"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RemoteEventUpdate is the builder for updating RemoteEvent entities.
type RemoteEventUpdate struct {
	config
	hooks    []Hook
	mutation *RemoteEventMutation
}

// Where appends a list predicates to the RemoteEventUpdate builder.
func (reu *RemoteEventUpdate) Where(ps ...predicate.RemoteEvent) *RemoteEventUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetURL sets the "url" field.
func (reu *RemoteEventUpdate) SetURL(s string) *RemoteEventUpdate {
	reu.mutation.SetURL(s)
	return reu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (reu *RemoteEventUpdate) SetNillableURL(s *string) *RemoteEventUpdate {
	if s != nil {
		reu.SetURL(*s)
	}
	return reu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (reu *RemoteEventUpdate) SetEventID(id string) *RemoteEventUpdate {
	reu.mutation.SetEventID(id)
	return reu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (reu *RemoteEventUpdate) SetNillableEventID(id *string) *RemoteEventUpdate {
	if id != nil {
		reu = reu.SetEventID(*id)
	}
	return reu
}

// SetEvent sets the "event" edge to the Event entity.
func (reu *RemoteEventUpdate) SetEvent(e *Event) *RemoteEventUpdate {
	return reu.SetEventID(e.ID)
}

// Mutation returns the RemoteEventMutation object of the builder.
func (reu *RemoteEventUpdate) Mutation() *RemoteEventMutation {
	return reu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (reu *RemoteEventUpdate) ClearEvent() *RemoteEventUpdate {
	reu.mutation.ClearEvent()
	return reu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RemoteEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RemoteEventUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RemoteEventUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RemoteEventUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (reu *RemoteEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(remoteevent.Table, remoteevent.Columns, sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.URL(); ok {
		_spec.SetField(remoteevent.FieldURL, field.TypeString, value)
	}
	if reu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remoteevent.EventTable,
			Columns: []string{remoteevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remoteevent.EventTable,
			Columns: []string{remoteevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RemoteEventUpdateOne is the builder for updating a single RemoteEvent entity.
type RemoteEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemoteEventMutation
}

// SetURL sets the "url" field.
func (reuo *RemoteEventUpdateOne) SetURL(s string) *RemoteEventUpdateOne {
	reuo.mutation.SetURL(s)
	return reuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (reuo *RemoteEventUpdateOne) SetNillableURL(s *string) *RemoteEventUpdateOne {
	if s != nil {
		reuo.SetURL(*s)
	}
	return reuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (reuo *RemoteEventUpdateOne) SetEventID(id string) *RemoteEventUpdateOne {
	reuo.mutation.SetEventID(id)
	return reuo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (reuo *RemoteEventUpdateOne) SetNillableEventID(id *string) *RemoteEventUpdateOne {
	if id != nil {
		reuo = reuo.SetEventID(*id)
	}
	return reuo
}

// SetEvent sets the "event" edge to the Event entity.
func (reuo *RemoteEventUpdateOne) SetEvent(e *Event) *RemoteEventUpdateOne {
	return reuo.SetEventID(e.ID)
}

// Mutation returns the RemoteEventMutation object of the builder.
func (reuo *RemoteEventUpdateOne) Mutation() *RemoteEventMutation {
	return reuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (reuo *RemoteEventUpdateOne) ClearEvent() *RemoteEventUpdateOne {
	reuo.mutation.ClearEvent()
	return reuo
}

// Where appends a list predicates to the RemoteEventUpdate builder.
func (reuo *RemoteEventUpdateOne) Where(ps ...predicate.RemoteEvent) *RemoteEventUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RemoteEventUpdateOne) Select(field string, fields ...string) *RemoteEventUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RemoteEvent entity.
func (reuo *RemoteEventUpdateOne) Save(ctx context.Context) (*RemoteEvent, error) {
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RemoteEventUpdateOne) SaveX(ctx context.Context) *RemoteEvent {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RemoteEventUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RemoteEventUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (reuo *RemoteEventUpdateOne) sqlSave(ctx context.Context) (_node *RemoteEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(remoteevent.Table, remoteevent.Columns, sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RemoteEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, remoteevent.FieldID)
		for _, f := range fields {
			if !remoteevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != remoteevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.URL(); ok {
		_spec.SetField(remoteevent.FieldURL, field.TypeString, value)
	}
	if reuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remoteevent.EventTable,
			Columns: []string{remoteevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := reuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remoteevent.EventTable,
			Columns: []string{remoteevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RemoteEvent{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
