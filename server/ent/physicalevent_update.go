// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/event"
	"edumeet/ent/physicalevent"
	"edumeet/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhysicalEventUpdate is the builder for updating PhysicalEvent entities.
type PhysicalEventUpdate struct {
	config
	hooks    []Hook
	mutation *PhysicalEventMutation
}

// Where appends a list predicates to the PhysicalEventUpdate builder.
func (peu *PhysicalEventUpdate) Where(ps ...predicate.PhysicalEvent) *PhysicalEventUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetLng sets the "lng" field.
func (peu *PhysicalEventUpdate) SetLng(f float64) *PhysicalEventUpdate {
	peu.mutation.ResetLng()
	peu.mutation.SetLng(f)
	return peu
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (peu *PhysicalEventUpdate) SetNillableLng(f *float64) *PhysicalEventUpdate {
	if f != nil {
		peu.SetLng(*f)
	}
	return peu
}

// AddLng adds f to the "lng" field.
func (peu *PhysicalEventUpdate) AddLng(f float64) *PhysicalEventUpdate {
	peu.mutation.AddLng(f)
	return peu
}

// SetLat sets the "lat" field.
func (peu *PhysicalEventUpdate) SetLat(f float64) *PhysicalEventUpdate {
	peu.mutation.ResetLat()
	peu.mutation.SetLat(f)
	return peu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (peu *PhysicalEventUpdate) SetNillableLat(f *float64) *PhysicalEventUpdate {
	if f != nil {
		peu.SetLat(*f)
	}
	return peu
}

// AddLat adds f to the "lat" field.
func (peu *PhysicalEventUpdate) AddLat(f float64) *PhysicalEventUpdate {
	peu.mutation.AddLat(f)
	return peu
}

// SetLocation sets the "location" field.
func (peu *PhysicalEventUpdate) SetLocation(s string) *PhysicalEventUpdate {
	peu.mutation.SetLocation(s)
	return peu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (peu *PhysicalEventUpdate) SetNillableLocation(s *string) *PhysicalEventUpdate {
	if s != nil {
		peu.SetLocation(*s)
	}
	return peu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (peu *PhysicalEventUpdate) SetEventID(id string) *PhysicalEventUpdate {
	peu.mutation.SetEventID(id)
	return peu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (peu *PhysicalEventUpdate) SetNillableEventID(id *string) *PhysicalEventUpdate {
	if id != nil {
		peu = peu.SetEventID(*id)
	}
	return peu
}

// SetEvent sets the "event" edge to the Event entity.
func (peu *PhysicalEventUpdate) SetEvent(e *Event) *PhysicalEventUpdate {
	return peu.SetEventID(e.ID)
}

// Mutation returns the PhysicalEventMutation object of the builder.
func (peu *PhysicalEventUpdate) Mutation() *PhysicalEventMutation {
	return peu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (peu *PhysicalEventUpdate) ClearEvent() *PhysicalEventUpdate {
	peu.mutation.ClearEvent()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PhysicalEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PhysicalEventUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PhysicalEventUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PhysicalEventUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peu *PhysicalEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(physicalevent.Table, physicalevent.Columns, sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.Lng(); ok {
		_spec.SetField(physicalevent.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.AddedLng(); ok {
		_spec.AddField(physicalevent.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.Lat(); ok {
		_spec.SetField(physicalevent.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.AddedLat(); ok {
		_spec.AddField(physicalevent.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.Location(); ok {
		_spec.SetField(physicalevent.FieldLocation, field.TypeString, value)
	}
	if peu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   physicalevent.EventTable,
			Columns: []string{physicalevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   physicalevent.EventTable,
			Columns: []string{physicalevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicalevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// PhysicalEventUpdateOne is the builder for updating a single PhysicalEvent entity.
type PhysicalEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhysicalEventMutation
}

// SetLng sets the "lng" field.
func (peuo *PhysicalEventUpdateOne) SetLng(f float64) *PhysicalEventUpdateOne {
	peuo.mutation.ResetLng()
	peuo.mutation.SetLng(f)
	return peuo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (peuo *PhysicalEventUpdateOne) SetNillableLng(f *float64) *PhysicalEventUpdateOne {
	if f != nil {
		peuo.SetLng(*f)
	}
	return peuo
}

// AddLng adds f to the "lng" field.
func (peuo *PhysicalEventUpdateOne) AddLng(f float64) *PhysicalEventUpdateOne {
	peuo.mutation.AddLng(f)
	return peuo
}

// SetLat sets the "lat" field.
func (peuo *PhysicalEventUpdateOne) SetLat(f float64) *PhysicalEventUpdateOne {
	peuo.mutation.ResetLat()
	peuo.mutation.SetLat(f)
	return peuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (peuo *PhysicalEventUpdateOne) SetNillableLat(f *float64) *PhysicalEventUpdateOne {
	if f != nil {
		peuo.SetLat(*f)
	}
	return peuo
}

// AddLat adds f to the "lat" field.
func (peuo *PhysicalEventUpdateOne) AddLat(f float64) *PhysicalEventUpdateOne {
	peuo.mutation.AddLat(f)
	return peuo
}

// SetLocation sets the "location" field.
func (peuo *PhysicalEventUpdateOne) SetLocation(s string) *PhysicalEventUpdateOne {
	peuo.mutation.SetLocation(s)
	return peuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (peuo *PhysicalEventUpdateOne) SetNillableLocation(s *string) *PhysicalEventUpdateOne {
	if s != nil {
		peuo.SetLocation(*s)
	}
	return peuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (peuo *PhysicalEventUpdateOne) SetEventID(id string) *PhysicalEventUpdateOne {
	peuo.mutation.SetEventID(id)
	return peuo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (peuo *PhysicalEventUpdateOne) SetNillableEventID(id *string) *PhysicalEventUpdateOne {
	if id != nil {
		peuo = peuo.SetEventID(*id)
	}
	return peuo
}

// SetEvent sets the "event" edge to the Event entity.
func (peuo *PhysicalEventUpdateOne) SetEvent(e *Event) *PhysicalEventUpdateOne {
	return peuo.SetEventID(e.ID)
}

// Mutation returns the PhysicalEventMutation object of the builder.
func (peuo *PhysicalEventUpdateOne) Mutation() *PhysicalEventMutation {
	return peuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (peuo *PhysicalEventUpdateOne) ClearEvent() *PhysicalEventUpdateOne {
	peuo.mutation.ClearEvent()
	return peuo
}

// Where appends a list predicates to the PhysicalEventUpdate builder.
func (peuo *PhysicalEventUpdateOne) Where(ps ...predicate.PhysicalEvent) *PhysicalEventUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PhysicalEventUpdateOne) Select(field string, fields ...string) *PhysicalEventUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PhysicalEvent entity.
func (peuo *PhysicalEventUpdateOne) Save(ctx context.Context) (*PhysicalEvent, error) {
	return withHooks(ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PhysicalEventUpdateOne) SaveX(ctx context.Context) *PhysicalEvent {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PhysicalEventUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PhysicalEventUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peuo *PhysicalEventUpdateOne) sqlSave(ctx context.Context) (_node *PhysicalEvent, err error) {
	_spec := sqlgraph.NewUpdateSpec(physicalevent.Table, physicalevent.Columns, sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PhysicalEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, physicalevent.FieldID)
		for _, f := range fields {
			if !physicalevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != physicalevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.Lng(); ok {
		_spec.SetField(physicalevent.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.AddedLng(); ok {
		_spec.AddField(physicalevent.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.Lat(); ok {
		_spec.SetField(physicalevent.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.AddedLat(); ok {
		_spec.AddField(physicalevent.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.Location(); ok {
		_spec.SetField(physicalevent.FieldLocation, field.TypeString, value)
	}
	if peuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   physicalevent.EventTable,
			Columns: []string{physicalevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   physicalevent.EventTable,
			Columns: []string{physicalevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PhysicalEvent{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicalevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
