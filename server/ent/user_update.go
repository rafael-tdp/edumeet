// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/badge"
	"edumeet/ent/event"
	"edumeet/ent/message"
	"edumeet/ent/participant"
	"edumeet/ent/predicate"
	"edumeet/ent/reporting"
	"edumeet/ent/subject"
	"edumeet/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetLastname sets the "lastname" field.
func (uu *UserUpdate) SetLastname(s string) *UserUpdate {
	uu.mutation.SetLastname(s)
	return uu
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastname(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastname(*s)
	}
	return uu
}

// SetFirstname sets the "firstname" field.
func (uu *UserUpdate) SetFirstname(s string) *UserUpdate {
	uu.mutation.SetFirstname(s)
	return uu
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstname(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstname(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetBirthDate sets the "birthDate" field.
func (uu *UserUpdate) SetBirthDate(t time.Time) *UserUpdate {
	uu.mutation.SetBirthDate(t)
	return uu
}

// SetNillableBirthDate sets the "birthDate" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBirthDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetBirthDate(*t)
	}
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// ClearBio clears the value of the "bio" field.
func (uu *UserUpdate) ClearBio() *UserUpdate {
	uu.mutation.ClearBio()
	return uu
}

// SetPicture sets the "picture" field.
func (uu *UserUpdate) SetPicture(s string) *UserUpdate {
	uu.mutation.SetPicture(s)
	return uu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePicture(s *string) *UserUpdate {
	if s != nil {
		uu.SetPicture(*s)
	}
	return uu
}

// ClearPicture clears the value of the "picture" field.
func (uu *UserUpdate) ClearPicture() *UserUpdate {
	uu.mutation.ClearPicture()
	return uu
}

// SetActivated sets the "activated" field.
func (uu *UserUpdate) SetActivated(b bool) *UserUpdate {
	uu.mutation.SetActivated(b)
	return uu
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActivated(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActivated(*b)
	}
	return uu
}

// SetReportNumber sets the "reportNumber" field.
func (uu *UserUpdate) SetReportNumber(i int) *UserUpdate {
	uu.mutation.ResetReportNumber()
	uu.mutation.SetReportNumber(i)
	return uu
}

// SetNillableReportNumber sets the "reportNumber" field if the given value is not nil.
func (uu *UserUpdate) SetNillableReportNumber(i *int) *UserUpdate {
	if i != nil {
		uu.SetReportNumber(*i)
	}
	return uu
}

// AddReportNumber adds i to the "reportNumber" field.
func (uu *UserUpdate) AddReportNumber(i int) *UserUpdate {
	uu.mutation.AddReportNumber(i)
	return uu
}

// SetLng sets the "lng" field.
func (uu *UserUpdate) SetLng(f float64) *UserUpdate {
	uu.mutation.ResetLng()
	uu.mutation.SetLng(f)
	return uu
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLng(f *float64) *UserUpdate {
	if f != nil {
		uu.SetLng(*f)
	}
	return uu
}

// AddLng adds f to the "lng" field.
func (uu *UserUpdate) AddLng(f float64) *UserUpdate {
	uu.mutation.AddLng(f)
	return uu
}

// ClearLng clears the value of the "lng" field.
func (uu *UserUpdate) ClearLng() *UserUpdate {
	uu.mutation.ClearLng()
	return uu
}

// SetLat sets the "lat" field.
func (uu *UserUpdate) SetLat(f float64) *UserUpdate {
	uu.mutation.ResetLat()
	uu.mutation.SetLat(f)
	return uu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLat(f *float64) *UserUpdate {
	if f != nil {
		uu.SetLat(*f)
	}
	return uu
}

// AddLat adds f to the "lat" field.
func (uu *UserUpdate) AddLat(f float64) *UserUpdate {
	uu.mutation.AddLat(f)
	return uu
}

// ClearLat clears the value of the "lat" field.
func (uu *UserUpdate) ClearLat() *UserUpdate {
	uu.mutation.ClearLat()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetCode sets the "code" field.
func (uu *UserUpdate) SetCode(s string) *UserUpdate {
	uu.mutation.SetCode(s)
	return uu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetCode(*s)
	}
	return uu
}

// ClearCode clears the value of the "code" field.
func (uu *UserUpdate) ClearCode() *UserUpdate {
	uu.mutation.ClearCode()
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// AddBadgeIDs adds the "badges" edge to the Badge entity by IDs.
func (uu *UserUpdate) AddBadgeIDs(ids ...string) *UserUpdate {
	uu.mutation.AddBadgeIDs(ids...)
	return uu
}

// AddBadges adds the "badges" edges to the Badge entity.
func (uu *UserUpdate) AddBadges(b ...*Badge) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBadgeIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (uu *UserUpdate) AddSubjectIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSubjectIDs(ids...)
	return uu
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (uu *UserUpdate) AddSubjects(s ...*Subject) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSubjectIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (uu *UserUpdate) AddEventIDs(ids ...string) *UserUpdate {
	uu.mutation.AddEventIDs(ids...)
	return uu
}

// AddEvents adds the "events" edges to the Event entity.
func (uu *UserUpdate) AddEvents(e ...*Event) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEventIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (uu *UserUpdate) AddMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMessageIDs(ids...)
	return uu
}

// AddMessages adds the "messages" edges to the Message entity.
func (uu *UserUpdate) AddMessages(m ...*Message) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMessageIDs(ids...)
}

// AddReportIDs adds the "reports" edge to the Reporting entity by IDs.
func (uu *UserUpdate) AddReportIDs(ids ...string) *UserUpdate {
	uu.mutation.AddReportIDs(ids...)
	return uu
}

// AddReports adds the "reports" edges to the Reporting entity.
func (uu *UserUpdate) AddReports(r ...*Reporting) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddReportIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (uu *UserUpdate) AddParticipantIDs(ids ...string) *UserUpdate {
	uu.mutation.AddParticipantIDs(ids...)
	return uu
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (uu *UserUpdate) AddParticipants(p ...*Participant) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddParticipantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBadges clears all "badges" edges to the Badge entity.
func (uu *UserUpdate) ClearBadges() *UserUpdate {
	uu.mutation.ClearBadges()
	return uu
}

// RemoveBadgeIDs removes the "badges" edge to Badge entities by IDs.
func (uu *UserUpdate) RemoveBadgeIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveBadgeIDs(ids...)
	return uu
}

// RemoveBadges removes "badges" edges to Badge entities.
func (uu *UserUpdate) RemoveBadges(b ...*Badge) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBadgeIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (uu *UserUpdate) ClearSubjects() *UserUpdate {
	uu.mutation.ClearSubjects()
	return uu
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (uu *UserUpdate) RemoveSubjectIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSubjectIDs(ids...)
	return uu
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (uu *UserUpdate) RemoveSubjects(s ...*Subject) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSubjectIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (uu *UserUpdate) ClearEvents() *UserUpdate {
	uu.mutation.ClearEvents()
	return uu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (uu *UserUpdate) RemoveEventIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveEventIDs(ids...)
	return uu
}

// RemoveEvents removes "events" edges to Event entities.
func (uu *UserUpdate) RemoveEvents(e ...*Event) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEventIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (uu *UserUpdate) ClearMessages() *UserUpdate {
	uu.mutation.ClearMessages()
	return uu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMessageIDs(ids...)
	return uu
}

// RemoveMessages removes "messages" edges to Message entities.
func (uu *UserUpdate) RemoveMessages(m ...*Message) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMessageIDs(ids...)
}

// ClearReports clears all "reports" edges to the Reporting entity.
func (uu *UserUpdate) ClearReports() *UserUpdate {
	uu.mutation.ClearReports()
	return uu
}

// RemoveReportIDs removes the "reports" edge to Reporting entities by IDs.
func (uu *UserUpdate) RemoveReportIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveReportIDs(ids...)
	return uu
}

// RemoveReports removes "reports" edges to Reporting entities.
func (uu *UserUpdate) RemoveReports(r ...*Reporting) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveReportIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (uu *UserUpdate) ClearParticipants() *UserUpdate {
	uu.mutation.ClearParticipants()
	return uu
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (uu *UserUpdate) RemoveParticipantIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveParticipantIDs(ids...)
	return uu
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (uu *UserUpdate) RemoveParticipants(p ...*Participant) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Lastname(); ok {
		_spec.SetField(user.FieldLastname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Firstname(); ok {
		_spec.SetField(user.FieldFirstname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.BirthDate(); ok {
		_spec.SetField(user.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uu.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uu.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uu.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uu.mutation.Activated(); ok {
		_spec.SetField(user.FieldActivated, field.TypeBool, value)
	}
	if value, ok := uu.mutation.ReportNumber(); ok {
		_spec.SetField(user.FieldReportNumber, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedReportNumber(); ok {
		_spec.AddField(user.FieldReportNumber, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Lng(); ok {
		_spec.SetField(user.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedLng(); ok {
		_spec.AddField(user.FieldLng, field.TypeFloat64, value)
	}
	if uu.mutation.LngCleared() {
		_spec.ClearField(user.FieldLng, field.TypeFloat64)
	}
	if value, ok := uu.mutation.Lat(); ok {
		_spec.SetField(user.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedLat(); ok {
		_spec.AddField(user.FieldLat, field.TypeFloat64, value)
	}
	if uu.mutation.LatCleared() {
		_spec.ClearField(user.FieldLat, field.TypeFloat64)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Code(); ok {
		_spec.SetField(user.FieldCode, field.TypeString, value)
	}
	if uu.mutation.CodeCleared() {
		_spec.ClearField(user.FieldCode, field.TypeString)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if uu.mutation.BadgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBadgesIDs(); len(nodes) > 0 && !uu.mutation.BadgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BadgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !uu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !uu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReportsIDs(); len(nodes) > 0 && !uu.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !uu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetLastname sets the "lastname" field.
func (uuo *UserUpdateOne) SetLastname(s string) *UserUpdateOne {
	uuo.mutation.SetLastname(s)
	return uuo
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastname(*s)
	}
	return uuo
}

// SetFirstname sets the "firstname" field.
func (uuo *UserUpdateOne) SetFirstname(s string) *UserUpdateOne {
	uuo.mutation.SetFirstname(s)
	return uuo
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstname(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetBirthDate sets the "birthDate" field.
func (uuo *UserUpdateOne) SetBirthDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthDate(t)
	return uuo
}

// SetNillableBirthDate sets the "birthDate" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBirthDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetBirthDate(*t)
	}
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// ClearBio clears the value of the "bio" field.
func (uuo *UserUpdateOne) ClearBio() *UserUpdateOne {
	uuo.mutation.ClearBio()
	return uuo
}

// SetPicture sets the "picture" field.
func (uuo *UserUpdateOne) SetPicture(s string) *UserUpdateOne {
	uuo.mutation.SetPicture(s)
	return uuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePicture(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPicture(*s)
	}
	return uuo
}

// ClearPicture clears the value of the "picture" field.
func (uuo *UserUpdateOne) ClearPicture() *UserUpdateOne {
	uuo.mutation.ClearPicture()
	return uuo
}

// SetActivated sets the "activated" field.
func (uuo *UserUpdateOne) SetActivated(b bool) *UserUpdateOne {
	uuo.mutation.SetActivated(b)
	return uuo
}

// SetNillableActivated sets the "activated" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActivated(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActivated(*b)
	}
	return uuo
}

// SetReportNumber sets the "reportNumber" field.
func (uuo *UserUpdateOne) SetReportNumber(i int) *UserUpdateOne {
	uuo.mutation.ResetReportNumber()
	uuo.mutation.SetReportNumber(i)
	return uuo
}

// SetNillableReportNumber sets the "reportNumber" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableReportNumber(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetReportNumber(*i)
	}
	return uuo
}

// AddReportNumber adds i to the "reportNumber" field.
func (uuo *UserUpdateOne) AddReportNumber(i int) *UserUpdateOne {
	uuo.mutation.AddReportNumber(i)
	return uuo
}

// SetLng sets the "lng" field.
func (uuo *UserUpdateOne) SetLng(f float64) *UserUpdateOne {
	uuo.mutation.ResetLng()
	uuo.mutation.SetLng(f)
	return uuo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLng(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetLng(*f)
	}
	return uuo
}

// AddLng adds f to the "lng" field.
func (uuo *UserUpdateOne) AddLng(f float64) *UserUpdateOne {
	uuo.mutation.AddLng(f)
	return uuo
}

// ClearLng clears the value of the "lng" field.
func (uuo *UserUpdateOne) ClearLng() *UserUpdateOne {
	uuo.mutation.ClearLng()
	return uuo
}

// SetLat sets the "lat" field.
func (uuo *UserUpdateOne) SetLat(f float64) *UserUpdateOne {
	uuo.mutation.ResetLat()
	uuo.mutation.SetLat(f)
	return uuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLat(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetLat(*f)
	}
	return uuo
}

// AddLat adds f to the "lat" field.
func (uuo *UserUpdateOne) AddLat(f float64) *UserUpdateOne {
	uuo.mutation.AddLat(f)
	return uuo
}

// ClearLat clears the value of the "lat" field.
func (uuo *UserUpdateOne) ClearLat() *UserUpdateOne {
	uuo.mutation.ClearLat()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetCode sets the "code" field.
func (uuo *UserUpdateOne) SetCode(s string) *UserUpdateOne {
	uuo.mutation.SetCode(s)
	return uuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCode(*s)
	}
	return uuo
}

// ClearCode clears the value of the "code" field.
func (uuo *UserUpdateOne) ClearCode() *UserUpdateOne {
	uuo.mutation.ClearCode()
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// AddBadgeIDs adds the "badges" edge to the Badge entity by IDs.
func (uuo *UserUpdateOne) AddBadgeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddBadgeIDs(ids...)
	return uuo
}

// AddBadges adds the "badges" edges to the Badge entity.
func (uuo *UserUpdateOne) AddBadges(b ...*Badge) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBadgeIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (uuo *UserUpdateOne) AddSubjectIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSubjectIDs(ids...)
	return uuo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (uuo *UserUpdateOne) AddSubjects(s ...*Subject) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSubjectIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (uuo *UserUpdateOne) AddEventIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddEventIDs(ids...)
	return uuo
}

// AddEvents adds the "events" edges to the Event entity.
func (uuo *UserUpdateOne) AddEvents(e ...*Event) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEventIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMessageIDs(ids...)
	return uuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (uuo *UserUpdateOne) AddMessages(m ...*Message) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMessageIDs(ids...)
}

// AddReportIDs adds the "reports" edge to the Reporting entity by IDs.
func (uuo *UserUpdateOne) AddReportIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddReportIDs(ids...)
	return uuo
}

// AddReports adds the "reports" edges to the Reporting entity.
func (uuo *UserUpdateOne) AddReports(r ...*Reporting) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddReportIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (uuo *UserUpdateOne) AddParticipantIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddParticipantIDs(ids...)
	return uuo
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (uuo *UserUpdateOne) AddParticipants(p ...*Participant) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddParticipantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBadges clears all "badges" edges to the Badge entity.
func (uuo *UserUpdateOne) ClearBadges() *UserUpdateOne {
	uuo.mutation.ClearBadges()
	return uuo
}

// RemoveBadgeIDs removes the "badges" edge to Badge entities by IDs.
func (uuo *UserUpdateOne) RemoveBadgeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveBadgeIDs(ids...)
	return uuo
}

// RemoveBadges removes "badges" edges to Badge entities.
func (uuo *UserUpdateOne) RemoveBadges(b ...*Badge) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBadgeIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (uuo *UserUpdateOne) ClearSubjects() *UserUpdateOne {
	uuo.mutation.ClearSubjects()
	return uuo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (uuo *UserUpdateOne) RemoveSubjectIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSubjectIDs(ids...)
	return uuo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (uuo *UserUpdateOne) RemoveSubjects(s ...*Subject) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSubjectIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (uuo *UserUpdateOne) ClearEvents() *UserUpdateOne {
	uuo.mutation.ClearEvents()
	return uuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (uuo *UserUpdateOne) RemoveEventIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveEventIDs(ids...)
	return uuo
}

// RemoveEvents removes "events" edges to Event entities.
func (uuo *UserUpdateOne) RemoveEvents(e ...*Event) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEventIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (uuo *UserUpdateOne) ClearMessages() *UserUpdateOne {
	uuo.mutation.ClearMessages()
	return uuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMessageIDs(ids...)
	return uuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (uuo *UserUpdateOne) RemoveMessages(m ...*Message) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMessageIDs(ids...)
}

// ClearReports clears all "reports" edges to the Reporting entity.
func (uuo *UserUpdateOne) ClearReports() *UserUpdateOne {
	uuo.mutation.ClearReports()
	return uuo
}

// RemoveReportIDs removes the "reports" edge to Reporting entities by IDs.
func (uuo *UserUpdateOne) RemoveReportIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveReportIDs(ids...)
	return uuo
}

// RemoveReports removes "reports" edges to Reporting entities.
func (uuo *UserUpdateOne) RemoveReports(r ...*Reporting) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveReportIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (uuo *UserUpdateOne) ClearParticipants() *UserUpdateOne {
	uuo.mutation.ClearParticipants()
	return uuo
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (uuo *UserUpdateOne) RemoveParticipantIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveParticipantIDs(ids...)
	return uuo
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (uuo *UserUpdateOne) RemoveParticipants(p ...*Participant) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveParticipantIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Lastname(); ok {
		_spec.SetField(user.FieldLastname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Firstname(); ok {
		_spec.SetField(user.FieldFirstname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.BirthDate(); ok {
		_spec.SetField(user.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uuo.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uuo.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uuo.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uuo.mutation.Activated(); ok {
		_spec.SetField(user.FieldActivated, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.ReportNumber(); ok {
		_spec.SetField(user.FieldReportNumber, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedReportNumber(); ok {
		_spec.AddField(user.FieldReportNumber, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Lng(); ok {
		_spec.SetField(user.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedLng(); ok {
		_spec.AddField(user.FieldLng, field.TypeFloat64, value)
	}
	if uuo.mutation.LngCleared() {
		_spec.ClearField(user.FieldLng, field.TypeFloat64)
	}
	if value, ok := uuo.mutation.Lat(); ok {
		_spec.SetField(user.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedLat(); ok {
		_spec.AddField(user.FieldLat, field.TypeFloat64, value)
	}
	if uuo.mutation.LatCleared() {
		_spec.ClearField(user.FieldLat, field.TypeFloat64)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Code(); ok {
		_spec.SetField(user.FieldCode, field.TypeString, value)
	}
	if uuo.mutation.CodeCleared() {
		_spec.ClearField(user.FieldCode, field.TypeString)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if uuo.mutation.BadgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBadgesIDs(); len(nodes) > 0 && !uuo.mutation.BadgesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BadgesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.BadgesTable,
			Columns: user.BadgesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(badge.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !uuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: user.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !uuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EventsTable,
			Columns: []string{user.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !uuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MessagesTable,
			Columns: []string{user.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReportsIDs(); len(nodes) > 0 && !uuo.mutation.ReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportsTable,
			Columns: []string{user.ReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !uuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ParticipantsTable,
			Columns: []string{user.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
