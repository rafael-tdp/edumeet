// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/event"
	"edumeet/ent/eventdocument"
	"edumeet/ent/message"
	"edumeet/ent/participant"
	"edumeet/ent/physicalevent"
	"edumeet/ent/predicate"
	"edumeet/ent/remoteevent"
	"edumeet/ent/subject"
	"edumeet/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetNbMaxUser sets the "nbMaxUser" field.
func (eu *EventUpdate) SetNbMaxUser(i int) *EventUpdate {
	eu.mutation.ResetNbMaxUser()
	eu.mutation.SetNbMaxUser(i)
	return eu
}

// SetNillableNbMaxUser sets the "nbMaxUser" field if the given value is not nil.
func (eu *EventUpdate) SetNillableNbMaxUser(i *int) *EventUpdate {
	if i != nil {
		eu.SetNbMaxUser(*i)
	}
	return eu
}

// AddNbMaxUser adds i to the "nbMaxUser" field.
func (eu *EventUpdate) AddNbMaxUser(i int) *EventUpdate {
	eu.mutation.AddNbMaxUser(i)
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *EventUpdate) SetStartDate(t time.Time) *EventUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *EventUpdate) SetEndDate(t time.Time) *EventUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *EventUpdate) ClearEndDate() *EventUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetIsPrivate sets the "isPrivate" field.
func (eu *EventUpdate) SetIsPrivate(b bool) *EventUpdate {
	eu.mutation.SetIsPrivate(b)
	return eu
}

// SetNillableIsPrivate sets the "isPrivate" field if the given value is not nil.
func (eu *EventUpdate) SetNillableIsPrivate(b *bool) *EventUpdate {
	if b != nil {
		eu.SetIsPrivate(*b)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetInvitationLink sets the "invitationLink" field.
func (eu *EventUpdate) SetInvitationLink(s string) *EventUpdate {
	eu.mutation.SetInvitationLink(s)
	return eu
}

// SetNillableInvitationLink sets the "invitationLink" field if the given value is not nil.
func (eu *EventUpdate) SetNillableInvitationLink(s *string) *EventUpdate {
	if s != nil {
		eu.SetInvitationLink(*s)
	}
	return eu
}

// ClearInvitationLink clears the value of the "invitationLink" field.
func (eu *EventUpdate) ClearInvitationLink() *EventUpdate {
	eu.mutation.ClearInvitationLink()
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EventUpdate) SetUserID(id string) *EventUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableUserID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EventUpdate) SetUser(u *User) *EventUpdate {
	return eu.SetUserID(u.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (eu *EventUpdate) SetMessagesID(id string) *EventUpdate {
	eu.mutation.SetMessagesID(id)
	return eu
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableMessagesID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetMessagesID(*id)
	}
	return eu
}

// SetMessages sets the "messages" edge to the Message entity.
func (eu *EventUpdate) SetMessages(m *Message) *EventUpdate {
	return eu.SetMessagesID(m.ID)
}

// AddEventDocumentIDs adds the "event_documents" edge to the EventDocument entity by IDs.
func (eu *EventUpdate) AddEventDocumentIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEventDocumentIDs(ids...)
	return eu
}

// AddEventDocuments adds the "event_documents" edges to the EventDocument entity.
func (eu *EventUpdate) AddEventDocuments(e ...*EventDocument) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEventDocumentIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (eu *EventUpdate) AddSubjectIDs(ids ...string) *EventUpdate {
	eu.mutation.AddSubjectIDs(ids...)
	return eu
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (eu *EventUpdate) AddSubjects(s ...*Subject) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSubjectIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (eu *EventUpdate) AddParticipantIDs(ids ...string) *EventUpdate {
	eu.mutation.AddParticipantIDs(ids...)
	return eu
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (eu *EventUpdate) AddParticipants(p ...*Participant) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddParticipantIDs(ids...)
}

// SetRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID.
func (eu *EventUpdate) SetRemoteEventID(id string) *EventUpdate {
	eu.mutation.SetRemoteEventID(id)
	return eu
}

// SetNillableRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableRemoteEventID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetRemoteEventID(*id)
	}
	return eu
}

// SetRemoteEvent sets the "remote_event" edge to the RemoteEvent entity.
func (eu *EventUpdate) SetRemoteEvent(r *RemoteEvent) *EventUpdate {
	return eu.SetRemoteEventID(r.ID)
}

// SetPhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID.
func (eu *EventUpdate) SetPhysicalEventID(id string) *EventUpdate {
	eu.mutation.SetPhysicalEventID(id)
	return eu
}

// SetNillablePhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillablePhysicalEventID(id *string) *EventUpdate {
	if id != nil {
		eu = eu.SetPhysicalEventID(*id)
	}
	return eu
}

// SetPhysicalEvent sets the "physical_event" edge to the PhysicalEvent entity.
func (eu *EventUpdate) SetPhysicalEvent(p *PhysicalEvent) *EventUpdate {
	return eu.SetPhysicalEventID(p.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearMessages clears the "messages" edge to the Message entity.
func (eu *EventUpdate) ClearMessages() *EventUpdate {
	eu.mutation.ClearMessages()
	return eu
}

// ClearEventDocuments clears all "event_documents" edges to the EventDocument entity.
func (eu *EventUpdate) ClearEventDocuments() *EventUpdate {
	eu.mutation.ClearEventDocuments()
	return eu
}

// RemoveEventDocumentIDs removes the "event_documents" edge to EventDocument entities by IDs.
func (eu *EventUpdate) RemoveEventDocumentIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEventDocumentIDs(ids...)
	return eu
}

// RemoveEventDocuments removes "event_documents" edges to EventDocument entities.
func (eu *EventUpdate) RemoveEventDocuments(e ...*EventDocument) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEventDocumentIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (eu *EventUpdate) ClearSubjects() *EventUpdate {
	eu.mutation.ClearSubjects()
	return eu
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (eu *EventUpdate) RemoveSubjectIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveSubjectIDs(ids...)
	return eu
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (eu *EventUpdate) RemoveSubjects(s ...*Subject) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSubjectIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (eu *EventUpdate) ClearParticipants() *EventUpdate {
	eu.mutation.ClearParticipants()
	return eu
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (eu *EventUpdate) RemoveParticipantIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveParticipantIDs(ids...)
	return eu
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (eu *EventUpdate) RemoveParticipants(p ...*Participant) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveParticipantIDs(ids...)
}

// ClearRemoteEvent clears the "remote_event" edge to the RemoteEvent entity.
func (eu *EventUpdate) ClearRemoteEvent() *EventUpdate {
	eu.mutation.ClearRemoteEvent()
	return eu
}

// ClearPhysicalEvent clears the "physical_event" edge to the PhysicalEvent entity.
func (eu *EventUpdate) ClearPhysicalEvent() *EventUpdate {
	eu.mutation.ClearPhysicalEvent()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.NbMaxUser(); ok {
		_spec.SetField(event.FieldNbMaxUser, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedNbMaxUser(); ok {
		_spec.AddField(event.FieldNbMaxUser, field.TypeInt, value)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(event.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.IsPrivate(); ok {
		_spec.SetField(event.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.InvitationLink(); ok {
		_spec.SetField(event.FieldInvitationLink, field.TypeString, value)
	}
	if eu.mutation.InvitationLinkCleared() {
		_spec.ClearField(event.FieldInvitationLink, field.TypeString)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.MessagesTable,
			Columns: []string{event.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.MessagesTable,
			Columns: []string{event.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EventDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEventDocumentsIDs(); len(nodes) > 0 && !eu.mutation.EventDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EventDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !eu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !eu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RemoteEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.RemoteEventTable,
			Columns: []string{event.RemoteEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemoteEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.RemoteEventTable,
			Columns: []string{event.RemoteEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PhysicalEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.PhysicalEventTable,
			Columns: []string{event.PhysicalEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PhysicalEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.PhysicalEventTable,
			Columns: []string{event.PhysicalEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetNbMaxUser sets the "nbMaxUser" field.
func (euo *EventUpdateOne) SetNbMaxUser(i int) *EventUpdateOne {
	euo.mutation.ResetNbMaxUser()
	euo.mutation.SetNbMaxUser(i)
	return euo
}

// SetNillableNbMaxUser sets the "nbMaxUser" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableNbMaxUser(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetNbMaxUser(*i)
	}
	return euo
}

// AddNbMaxUser adds i to the "nbMaxUser" field.
func (euo *EventUpdateOne) AddNbMaxUser(i int) *EventUpdateOne {
	euo.mutation.AddNbMaxUser(i)
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *EventUpdateOne) SetStartDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *EventUpdateOne) SetEndDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *EventUpdateOne) ClearEndDate() *EventUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetIsPrivate sets the "isPrivate" field.
func (euo *EventUpdateOne) SetIsPrivate(b bool) *EventUpdateOne {
	euo.mutation.SetIsPrivate(b)
	return euo
}

// SetNillableIsPrivate sets the "isPrivate" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableIsPrivate(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetIsPrivate(*b)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetInvitationLink sets the "invitationLink" field.
func (euo *EventUpdateOne) SetInvitationLink(s string) *EventUpdateOne {
	euo.mutation.SetInvitationLink(s)
	return euo
}

// SetNillableInvitationLink sets the "invitationLink" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableInvitationLink(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetInvitationLink(*s)
	}
	return euo
}

// ClearInvitationLink clears the value of the "invitationLink" field.
func (euo *EventUpdateOne) ClearInvitationLink() *EventUpdateOne {
	euo.mutation.ClearInvitationLink()
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EventUpdateOne) SetUserID(id string) *EventUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUserID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EventUpdateOne) SetUser(u *User) *EventUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (euo *EventUpdateOne) SetMessagesID(id string) *EventUpdateOne {
	euo.mutation.SetMessagesID(id)
	return euo
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableMessagesID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetMessagesID(*id)
	}
	return euo
}

// SetMessages sets the "messages" edge to the Message entity.
func (euo *EventUpdateOne) SetMessages(m *Message) *EventUpdateOne {
	return euo.SetMessagesID(m.ID)
}

// AddEventDocumentIDs adds the "event_documents" edge to the EventDocument entity by IDs.
func (euo *EventUpdateOne) AddEventDocumentIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEventDocumentIDs(ids...)
	return euo
}

// AddEventDocuments adds the "event_documents" edges to the EventDocument entity.
func (euo *EventUpdateOne) AddEventDocuments(e ...*EventDocument) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEventDocumentIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (euo *EventUpdateOne) AddSubjectIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddSubjectIDs(ids...)
	return euo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (euo *EventUpdateOne) AddSubjects(s ...*Subject) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSubjectIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (euo *EventUpdateOne) AddParticipantIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddParticipantIDs(ids...)
	return euo
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (euo *EventUpdateOne) AddParticipants(p ...*Participant) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddParticipantIDs(ids...)
}

// SetRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID.
func (euo *EventUpdateOne) SetRemoteEventID(id string) *EventUpdateOne {
	euo.mutation.SetRemoteEventID(id)
	return euo
}

// SetNillableRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableRemoteEventID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetRemoteEventID(*id)
	}
	return euo
}

// SetRemoteEvent sets the "remote_event" edge to the RemoteEvent entity.
func (euo *EventUpdateOne) SetRemoteEvent(r *RemoteEvent) *EventUpdateOne {
	return euo.SetRemoteEventID(r.ID)
}

// SetPhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID.
func (euo *EventUpdateOne) SetPhysicalEventID(id string) *EventUpdateOne {
	euo.mutation.SetPhysicalEventID(id)
	return euo
}

// SetNillablePhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePhysicalEventID(id *string) *EventUpdateOne {
	if id != nil {
		euo = euo.SetPhysicalEventID(*id)
	}
	return euo
}

// SetPhysicalEvent sets the "physical_event" edge to the PhysicalEvent entity.
func (euo *EventUpdateOne) SetPhysicalEvent(p *PhysicalEvent) *EventUpdateOne {
	return euo.SetPhysicalEventID(p.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearMessages clears the "messages" edge to the Message entity.
func (euo *EventUpdateOne) ClearMessages() *EventUpdateOne {
	euo.mutation.ClearMessages()
	return euo
}

// ClearEventDocuments clears all "event_documents" edges to the EventDocument entity.
func (euo *EventUpdateOne) ClearEventDocuments() *EventUpdateOne {
	euo.mutation.ClearEventDocuments()
	return euo
}

// RemoveEventDocumentIDs removes the "event_documents" edge to EventDocument entities by IDs.
func (euo *EventUpdateOne) RemoveEventDocumentIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEventDocumentIDs(ids...)
	return euo
}

// RemoveEventDocuments removes "event_documents" edges to EventDocument entities.
func (euo *EventUpdateOne) RemoveEventDocuments(e ...*EventDocument) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEventDocumentIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (euo *EventUpdateOne) ClearSubjects() *EventUpdateOne {
	euo.mutation.ClearSubjects()
	return euo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (euo *EventUpdateOne) RemoveSubjectIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveSubjectIDs(ids...)
	return euo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (euo *EventUpdateOne) RemoveSubjects(s ...*Subject) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSubjectIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the Participant entity.
func (euo *EventUpdateOne) ClearParticipants() *EventUpdateOne {
	euo.mutation.ClearParticipants()
	return euo
}

// RemoveParticipantIDs removes the "participants" edge to Participant entities by IDs.
func (euo *EventUpdateOne) RemoveParticipantIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveParticipantIDs(ids...)
	return euo
}

// RemoveParticipants removes "participants" edges to Participant entities.
func (euo *EventUpdateOne) RemoveParticipants(p ...*Participant) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveParticipantIDs(ids...)
}

// ClearRemoteEvent clears the "remote_event" edge to the RemoteEvent entity.
func (euo *EventUpdateOne) ClearRemoteEvent() *EventUpdateOne {
	euo.mutation.ClearRemoteEvent()
	return euo
}

// ClearPhysicalEvent clears the "physical_event" edge to the PhysicalEvent entity.
func (euo *EventUpdateOne) ClearPhysicalEvent() *EventUpdateOne {
	euo.mutation.ClearPhysicalEvent()
	return euo
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.NbMaxUser(); ok {
		_spec.SetField(event.FieldNbMaxUser, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedNbMaxUser(); ok {
		_spec.AddField(event.FieldNbMaxUser, field.TypeInt, value)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(event.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.IsPrivate(); ok {
		_spec.SetField(event.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.InvitationLink(); ok {
		_spec.SetField(event.FieldInvitationLink, field.TypeString, value)
	}
	if euo.mutation.InvitationLinkCleared() {
		_spec.ClearField(event.FieldInvitationLink, field.TypeString)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.MessagesTable,
			Columns: []string{event.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.MessagesTable,
			Columns: []string{event.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EventDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEventDocumentsIDs(); len(nodes) > 0 && !euo.mutation.EventDocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EventDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !euo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !euo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RemoteEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.RemoteEventTable,
			Columns: []string{event.RemoteEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemoteEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.RemoteEventTable,
			Columns: []string{event.RemoteEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PhysicalEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.PhysicalEventTable,
			Columns: []string{event.PhysicalEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PhysicalEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.PhysicalEventTable,
			Columns: []string{event.PhysicalEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
