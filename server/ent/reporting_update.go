// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/predicate"
	"edumeet/ent/reporting"
	"edumeet/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReportingUpdate is the builder for updating Reporting entities.
type ReportingUpdate struct {
	config
	hooks    []Hook
	mutation *ReportingMutation
}

// Where appends a list predicates to the ReportingUpdate builder.
func (ru *ReportingUpdate) Where(ps ...predicate.Reporting) *ReportingUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetReason sets the "reason" field.
func (ru *ReportingUpdate) SetReason(s string) *ReportingUpdate {
	ru.mutation.SetReason(s)
	return ru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ru *ReportingUpdate) SetNillableReason(s *string) *ReportingUpdate {
	if s != nil {
		ru.SetReason(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *ReportingUpdate) SetType(s string) *ReportingUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *ReportingUpdate) SetNillableType(s *string) *ReportingUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// SetEntityID sets the "entity_id" field.
func (ru *ReportingUpdate) SetEntityID(s string) *ReportingUpdate {
	ru.mutation.SetEntityID(s)
	return ru
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (ru *ReportingUpdate) SetNillableEntityID(s *string) *ReportingUpdate {
	if s != nil {
		ru.SetEntityID(*s)
	}
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ReportingUpdate) SetUserID(id string) *ReportingUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *ReportingUpdate) SetNillableUserID(id *string) *ReportingUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReportingUpdate) SetUser(u *User) *ReportingUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the ReportingMutation object of the builder.
func (ru *ReportingUpdate) Mutation() *ReportingMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReportingUpdate) ClearUser() *ReportingUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReportingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reporting.Table, reporting.Columns, sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Reason(); ok {
		_spec.SetField(reporting.FieldReason, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(reporting.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.EntityID(); ok {
		_spec.SetField(reporting.FieldEntityID, field.TypeString, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reporting.UserTable,
			Columns: []string{reporting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reporting.UserTable,
			Columns: []string{reporting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReportingUpdateOne is the builder for updating a single Reporting entity.
type ReportingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportingMutation
}

// SetReason sets the "reason" field.
func (ruo *ReportingUpdateOne) SetReason(s string) *ReportingUpdateOne {
	ruo.mutation.SetReason(s)
	return ruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ruo *ReportingUpdateOne) SetNillableReason(s *string) *ReportingUpdateOne {
	if s != nil {
		ruo.SetReason(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *ReportingUpdateOne) SetType(s string) *ReportingUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *ReportingUpdateOne) SetNillableType(s *string) *ReportingUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// SetEntityID sets the "entity_id" field.
func (ruo *ReportingUpdateOne) SetEntityID(s string) *ReportingUpdateOne {
	ruo.mutation.SetEntityID(s)
	return ruo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (ruo *ReportingUpdateOne) SetNillableEntityID(s *string) *ReportingUpdateOne {
	if s != nil {
		ruo.SetEntityID(*s)
	}
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ReportingUpdateOne) SetUserID(id string) *ReportingUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *ReportingUpdateOne) SetNillableUserID(id *string) *ReportingUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReportingUpdateOne) SetUser(u *User) *ReportingUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the ReportingMutation object of the builder.
func (ruo *ReportingUpdateOne) Mutation() *ReportingMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReportingUpdateOne) ClearUser() *ReportingUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the ReportingUpdate builder.
func (ruo *ReportingUpdateOne) Where(ps ...predicate.Reporting) *ReportingUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReportingUpdateOne) Select(field string, fields ...string) *ReportingUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reporting entity.
func (ruo *ReportingUpdateOne) Save(ctx context.Context) (*Reporting, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportingUpdateOne) SaveX(ctx context.Context) *Reporting {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReportingUpdateOne) sqlSave(ctx context.Context) (_node *Reporting, err error) {
	_spec := sqlgraph.NewUpdateSpec(reporting.Table, reporting.Columns, sqlgraph.NewFieldSpec(reporting.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reporting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reporting.FieldID)
		for _, f := range fields {
			if !reporting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reporting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Reason(); ok {
		_spec.SetField(reporting.FieldReason, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(reporting.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.EntityID(); ok {
		_spec.SetField(reporting.FieldEntityID, field.TypeString, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reporting.UserTable,
			Columns: []string{reporting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reporting.UserTable,
			Columns: []string{reporting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reporting{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
