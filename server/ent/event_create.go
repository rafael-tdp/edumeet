// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/event"
	"edumeet/ent/eventdocument"
	"edumeet/ent/message"
	"edumeet/ent/participant"
	"edumeet/ent/physicalevent"
	"edumeet/ent/remoteevent"
	"edumeet/ent/subject"
	"edumeet/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetNbMaxUser sets the "nbMaxUser" field.
func (ec *EventCreate) SetNbMaxUser(i int) *EventCreate {
	ec.mutation.SetNbMaxUser(i)
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *EventCreate) SetStartDate(t time.Time) *EventCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *EventCreate) SetEndDate(t time.Time) *EventCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ec *EventCreate) SetNillableEndDate(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetEndDate(*t)
	}
	return ec
}

// SetIsPrivate sets the "isPrivate" field.
func (ec *EventCreate) SetIsPrivate(b bool) *EventCreate {
	ec.mutation.SetIsPrivate(b)
	return ec
}

// SetNillableIsPrivate sets the "isPrivate" field if the given value is not nil.
func (ec *EventCreate) SetNillableIsPrivate(b *bool) *EventCreate {
	if b != nil {
		ec.SetIsPrivate(*b)
	}
	return ec
}

// SetTitle sets the "title" field.
func (ec *EventCreate) SetTitle(s string) *EventCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetInvitationLink sets the "invitationLink" field.
func (ec *EventCreate) SetInvitationLink(s string) *EventCreate {
	ec.mutation.SetInvitationLink(s)
	return ec
}

// SetNillableInvitationLink sets the "invitationLink" field if the given value is not nil.
func (ec *EventCreate) SetNillableInvitationLink(s *string) *EventCreate {
	if s != nil {
		ec.SetInvitationLink(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EventCreate) SetID(s string) *EventCreate {
	ec.mutation.SetID(s)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EventCreate) SetNillableID(s *string) *EventCreate {
	if s != nil {
		ec.SetID(*s)
	}
	return ec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EventCreate) SetUserID(id string) *EventCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableUserID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EventCreate) SetUser(u *User) *EventCreate {
	return ec.SetUserID(u.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (ec *EventCreate) SetMessagesID(id string) *EventCreate {
	ec.mutation.SetMessagesID(id)
	return ec
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableMessagesID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetMessagesID(*id)
	}
	return ec
}

// SetMessages sets the "messages" edge to the Message entity.
func (ec *EventCreate) SetMessages(m *Message) *EventCreate {
	return ec.SetMessagesID(m.ID)
}

// AddEventDocumentIDs adds the "event_documents" edge to the EventDocument entity by IDs.
func (ec *EventCreate) AddEventDocumentIDs(ids ...string) *EventCreate {
	ec.mutation.AddEventDocumentIDs(ids...)
	return ec
}

// AddEventDocuments adds the "event_documents" edges to the EventDocument entity.
func (ec *EventCreate) AddEventDocuments(e ...*EventDocument) *EventCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEventDocumentIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (ec *EventCreate) AddSubjectIDs(ids ...string) *EventCreate {
	ec.mutation.AddSubjectIDs(ids...)
	return ec
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (ec *EventCreate) AddSubjects(s ...*Subject) *EventCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddSubjectIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the Participant entity by IDs.
func (ec *EventCreate) AddParticipantIDs(ids ...string) *EventCreate {
	ec.mutation.AddParticipantIDs(ids...)
	return ec
}

// AddParticipants adds the "participants" edges to the Participant entity.
func (ec *EventCreate) AddParticipants(p ...*Participant) *EventCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddParticipantIDs(ids...)
}

// SetRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID.
func (ec *EventCreate) SetRemoteEventID(id string) *EventCreate {
	ec.mutation.SetRemoteEventID(id)
	return ec
}

// SetNillableRemoteEventID sets the "remote_event" edge to the RemoteEvent entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillableRemoteEventID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetRemoteEventID(*id)
	}
	return ec
}

// SetRemoteEvent sets the "remote_event" edge to the RemoteEvent entity.
func (ec *EventCreate) SetRemoteEvent(r *RemoteEvent) *EventCreate {
	return ec.SetRemoteEventID(r.ID)
}

// SetPhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID.
func (ec *EventCreate) SetPhysicalEventID(id string) *EventCreate {
	ec.mutation.SetPhysicalEventID(id)
	return ec
}

// SetNillablePhysicalEventID sets the "physical_event" edge to the PhysicalEvent entity by ID if the given value is not nil.
func (ec *EventCreate) SetNillablePhysicalEventID(id *string) *EventCreate {
	if id != nil {
		ec = ec.SetPhysicalEventID(*id)
	}
	return ec
}

// SetPhysicalEvent sets the "physical_event" edge to the PhysicalEvent entity.
func (ec *EventCreate) SetPhysicalEvent(p *PhysicalEvent) *EventCreate {
	return ec.SetPhysicalEventID(p.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.IsPrivate(); !ok {
		v := event.DefaultIsPrivate
		ec.mutation.SetIsPrivate(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := event.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.NbMaxUser(); !ok {
		return &ValidationError{Name: "nbMaxUser", err: errors.New(`ent: missing required field "Event.nbMaxUser"`)}
	}
	if _, ok := ec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Event.start_date"`)}
	}
	if _, ok := ec.mutation.IsPrivate(); !ok {
		return &ValidationError{Name: "isPrivate", err: errors.New(`ent: missing required field "Event.isPrivate"`)}
	}
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Event.title"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Event.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.NbMaxUser(); ok {
		_spec.SetField(event.FieldNbMaxUser, field.TypeInt, value)
		_node.NbMaxUser = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ec.mutation.IsPrivate(); ok {
		_spec.SetField(event.FieldIsPrivate, field.TypeBool, value)
		_node.IsPrivate = value
	}
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.InvitationLink(); ok {
		_spec.SetField(event.FieldInvitationLink, field.TypeString, value)
		_node.InvitationLink = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.MessagesTable,
			Columns: []string{event.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EventDocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventDocumentsTable,
			Columns: []string{event.EventDocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   event.SubjectsTable,
			Columns: event.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.ParticipantsTable,
			Columns: []string{event.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(participant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RemoteEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.RemoteEventTable,
			Columns: []string{event.RemoteEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PhysicalEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   event.PhysicalEventTable,
			Columns: []string{event.PhysicalEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(physicalevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
