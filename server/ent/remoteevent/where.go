// Code generated by ent, DO NOT EDIT.

package remoteevent

import (
	"edumeet/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldContainsFold(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEQ(FieldURL, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.FieldContainsFold(FieldURL, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.RemoteEvent {
	return predicate.RemoteEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.RemoteEvent {
	return predicate.RemoteEvent(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RemoteEvent) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RemoteEvent) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RemoteEvent) predicate.RemoteEvent {
	return predicate.RemoteEvent(sql.NotPredicates(p))
}
