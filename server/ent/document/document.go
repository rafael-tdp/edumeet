// Code generated by ent, DO NOT EDIT.

package document

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// EdgeEventDocuments holds the string denoting the event_documents edge name in mutations.
	EdgeEventDocuments = "event_documents"
	// EdgeMessage holds the string denoting the message edge name in mutations.
	EdgeMessage = "message"
	// Table holds the table name of the document in the database.
	Table = "documents"
	// EventDocumentsTable is the table that holds the event_documents relation/edge.
	EventDocumentsTable = "event_documents"
	// EventDocumentsInverseTable is the table name for the EventDocument entity.
	// It exists in this package in order to avoid circular dependency with the "eventdocument" package.
	EventDocumentsInverseTable = "event_documents"
	// EventDocumentsColumn is the table column denoting the event_documents relation/edge.
	EventDocumentsColumn = "document_event_documents"
	// MessageTable is the table that holds the message relation/edge. The primary key declared below.
	MessageTable = "message_documents"
	// MessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageInverseTable = "messages"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldPath,
}

var (
	// MessagePrimaryKey and MessageColumn2 are the table columns denoting the
	// primary key for the message relation (M2M).
	MessagePrimaryKey = []string{"message_id", "document_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByEventDocumentsCount orders the results by event_documents count.
func ByEventDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventDocumentsStep(), opts...)
	}
}

// ByEventDocuments orders the results by event_documents terms.
func ByEventDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessageCount orders the results by message count.
func ByMessageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessageStep(), opts...)
	}
}

// ByMessage orders the results by message terms.
func ByMessage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventDocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventDocumentsTable, EventDocumentsColumn),
	)
}
func newMessageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MessageTable, MessagePrimaryKey...),
	)
}
