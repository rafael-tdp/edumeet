// Code generated by ent, DO NOT EDIT.

package event

import (
	"edumeet/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldID, id))
}

// NbMaxUser applies equality check predicate on the "nbMaxUser" field. It's identical to NbMaxUserEQ.
func NbMaxUser(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNbMaxUser, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// IsPrivate applies equality check predicate on the "isPrivate" field. It's identical to IsPrivateEQ.
func IsPrivate(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPrivate, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// InvitationLink applies equality check predicate on the "invitationLink" field. It's identical to InvitationLinkEQ.
func InvitationLink(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldInvitationLink, v))
}

// NbMaxUserEQ applies the EQ predicate on the "nbMaxUser" field.
func NbMaxUserEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNbMaxUser, v))
}

// NbMaxUserNEQ applies the NEQ predicate on the "nbMaxUser" field.
func NbMaxUserNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldNbMaxUser, v))
}

// NbMaxUserIn applies the In predicate on the "nbMaxUser" field.
func NbMaxUserIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldNbMaxUser, vs...))
}

// NbMaxUserNotIn applies the NotIn predicate on the "nbMaxUser" field.
func NbMaxUserNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldNbMaxUser, vs...))
}

// NbMaxUserGT applies the GT predicate on the "nbMaxUser" field.
func NbMaxUserGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldNbMaxUser, v))
}

// NbMaxUserGTE applies the GTE predicate on the "nbMaxUser" field.
func NbMaxUserGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldNbMaxUser, v))
}

// NbMaxUserLT applies the LT predicate on the "nbMaxUser" field.
func NbMaxUserLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldNbMaxUser, v))
}

// NbMaxUserLTE applies the LTE predicate on the "nbMaxUser" field.
func NbMaxUserLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldNbMaxUser, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldEndDate))
}

// IsPrivateEQ applies the EQ predicate on the "isPrivate" field.
func IsPrivateEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPrivate, v))
}

// IsPrivateNEQ applies the NEQ predicate on the "isPrivate" field.
func IsPrivateNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsPrivate, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldDescription, v))
}

// InvitationLinkEQ applies the EQ predicate on the "invitationLink" field.
func InvitationLinkEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldInvitationLink, v))
}

// InvitationLinkNEQ applies the NEQ predicate on the "invitationLink" field.
func InvitationLinkNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldInvitationLink, v))
}

// InvitationLinkIn applies the In predicate on the "invitationLink" field.
func InvitationLinkIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldInvitationLink, vs...))
}

// InvitationLinkNotIn applies the NotIn predicate on the "invitationLink" field.
func InvitationLinkNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldInvitationLink, vs...))
}

// InvitationLinkGT applies the GT predicate on the "invitationLink" field.
func InvitationLinkGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldInvitationLink, v))
}

// InvitationLinkGTE applies the GTE predicate on the "invitationLink" field.
func InvitationLinkGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldInvitationLink, v))
}

// InvitationLinkLT applies the LT predicate on the "invitationLink" field.
func InvitationLinkLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldInvitationLink, v))
}

// InvitationLinkLTE applies the LTE predicate on the "invitationLink" field.
func InvitationLinkLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldInvitationLink, v))
}

// InvitationLinkContains applies the Contains predicate on the "invitationLink" field.
func InvitationLinkContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldInvitationLink, v))
}

// InvitationLinkHasPrefix applies the HasPrefix predicate on the "invitationLink" field.
func InvitationLinkHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldInvitationLink, v))
}

// InvitationLinkHasSuffix applies the HasSuffix predicate on the "invitationLink" field.
func InvitationLinkHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldInvitationLink, v))
}

// InvitationLinkIsNil applies the IsNil predicate on the "invitationLink" field.
func InvitationLinkIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldInvitationLink))
}

// InvitationLinkNotNil applies the NotNil predicate on the "invitationLink" field.
func InvitationLinkNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldInvitationLink))
}

// InvitationLinkEqualFold applies the EqualFold predicate on the "invitationLink" field.
func InvitationLinkEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldInvitationLink, v))
}

// InvitationLinkContainsFold applies the ContainsFold predicate on the "invitationLink" field.
func InvitationLinkContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldInvitationLink, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEventDocuments applies the HasEdge predicate on the "event_documents" edge.
func HasEventDocuments() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventDocumentsTable, EventDocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventDocumentsWith applies the HasEdge predicate on the "event_documents" edge with a given conditions (other predicates).
func HasEventDocumentsWith(preds ...predicate.EventDocument) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newEventDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubjects applies the HasEdge predicate on the "subjects" edge.
func HasSubjects() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubjectsTable, SubjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectsWith applies the HasEdge predicate on the "subjects" edge with a given conditions (other predicates).
func HasSubjectsWith(preds ...predicate.Subject) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newSubjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParticipants applies the HasEdge predicate on the "participants" edge.
func HasParticipants() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParticipantsTable, ParticipantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParticipantsWith applies the HasEdge predicate on the "participants" edge with a given conditions (other predicates).
func HasParticipantsWith(preds ...predicate.Participant) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newParticipantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRemoteEvent applies the HasEdge predicate on the "remote_event" edge.
func HasRemoteEvent() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RemoteEventTable, RemoteEventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRemoteEventWith applies the HasEdge predicate on the "remote_event" edge with a given conditions (other predicates).
func HasRemoteEventWith(preds ...predicate.RemoteEvent) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newRemoteEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhysicalEvent applies the HasEdge predicate on the "physical_event" edge.
func HasPhysicalEvent() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PhysicalEventTable, PhysicalEventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhysicalEventWith applies the HasEdge predicate on the "physical_event" edge with a given conditions (other predicates).
func HasPhysicalEventWith(preds ...predicate.PhysicalEvent) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newPhysicalEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
