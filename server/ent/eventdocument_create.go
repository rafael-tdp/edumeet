// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/document"
	"edumeet/ent/event"
	"edumeet/ent/eventdocument"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventDocumentCreate is the builder for creating a EventDocument entity.
type EventDocumentCreate struct {
	config
	mutation *EventDocumentMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (edc *EventDocumentCreate) SetType(s string) *EventDocumentCreate {
	edc.mutation.SetType(s)
	return edc
}

// SetID sets the "id" field.
func (edc *EventDocumentCreate) SetID(s string) *EventDocumentCreate {
	edc.mutation.SetID(s)
	return edc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (edc *EventDocumentCreate) SetNillableID(s *string) *EventDocumentCreate {
	if s != nil {
		edc.SetID(*s)
	}
	return edc
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (edc *EventDocumentCreate) SetDocumentID(id string) *EventDocumentCreate {
	edc.mutation.SetDocumentID(id)
	return edc
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (edc *EventDocumentCreate) SetNillableDocumentID(id *string) *EventDocumentCreate {
	if id != nil {
		edc = edc.SetDocumentID(*id)
	}
	return edc
}

// SetDocument sets the "document" edge to the Document entity.
func (edc *EventDocumentCreate) SetDocument(d *Document) *EventDocumentCreate {
	return edc.SetDocumentID(d.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (edc *EventDocumentCreate) SetEventID(id string) *EventDocumentCreate {
	edc.mutation.SetEventID(id)
	return edc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (edc *EventDocumentCreate) SetNillableEventID(id *string) *EventDocumentCreate {
	if id != nil {
		edc = edc.SetEventID(*id)
	}
	return edc
}

// SetEvent sets the "event" edge to the Event entity.
func (edc *EventDocumentCreate) SetEvent(e *Event) *EventDocumentCreate {
	return edc.SetEventID(e.ID)
}

// Mutation returns the EventDocumentMutation object of the builder.
func (edc *EventDocumentCreate) Mutation() *EventDocumentMutation {
	return edc.mutation
}

// Save creates the EventDocument in the database.
func (edc *EventDocumentCreate) Save(ctx context.Context) (*EventDocument, error) {
	edc.defaults()
	return withHooks(ctx, edc.sqlSave, edc.mutation, edc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edc *EventDocumentCreate) SaveX(ctx context.Context) *EventDocument {
	v, err := edc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edc *EventDocumentCreate) Exec(ctx context.Context) error {
	_, err := edc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edc *EventDocumentCreate) ExecX(ctx context.Context) {
	if err := edc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edc *EventDocumentCreate) defaults() {
	if _, ok := edc.mutation.ID(); !ok {
		v := eventdocument.DefaultID()
		edc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edc *EventDocumentCreate) check() error {
	if _, ok := edc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "EventDocument.type"`)}
	}
	return nil
}

func (edc *EventDocumentCreate) sqlSave(ctx context.Context) (*EventDocument, error) {
	if err := edc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EventDocument.ID type: %T", _spec.ID.Value)
		}
	}
	edc.mutation.id = &_node.ID
	edc.mutation.done = true
	return _node, nil
}

func (edc *EventDocumentCreate) createSpec() (*EventDocument, *sqlgraph.CreateSpec) {
	var (
		_node = &EventDocument{config: edc.config}
		_spec = sqlgraph.NewCreateSpec(eventdocument.Table, sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString))
	)
	if id, ok := edc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := edc.mutation.GetType(); ok {
		_spec.SetField(eventdocument.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := edc.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.DocumentTable,
			Columns: []string{eventdocument.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_event_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := edc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.EventTable,
			Columns: []string{eventdocument.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_event_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventDocumentCreateBulk is the builder for creating many EventDocument entities in bulk.
type EventDocumentCreateBulk struct {
	config
	err      error
	builders []*EventDocumentCreate
}

// Save creates the EventDocument entities in the database.
func (edcb *EventDocumentCreateBulk) Save(ctx context.Context) ([]*EventDocument, error) {
	if edcb.err != nil {
		return nil, edcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(edcb.builders))
	nodes := make([]*EventDocument, len(edcb.builders))
	mutators := make([]Mutator, len(edcb.builders))
	for i := range edcb.builders {
		func(i int, root context.Context) {
			builder := edcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventDocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edcb *EventDocumentCreateBulk) SaveX(ctx context.Context) []*EventDocument {
	v, err := edcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edcb *EventDocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := edcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edcb *EventDocumentCreateBulk) ExecX(ctx context.Context) {
	if err := edcb.Exec(ctx); err != nil {
		panic(err)
	}
}
