// Code generated by ent, DO NOT EDIT.

package ent

import (
	"edumeet/ent/event"
	"edumeet/ent/physicalevent"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PhysicalEvent is the model entity for the PhysicalEvent schema.
type PhysicalEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng float64 `json:"lng,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhysicalEventQuery when eager-loading is set.
	Edges                PhysicalEventEdges `json:"edges"`
	event_physical_event *string
	selectValues         sql.SelectValues
}

// PhysicalEventEdges holds the relations/edges for other nodes in the graph.
type PhysicalEventEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhysicalEventEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PhysicalEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case physicalevent.FieldLng, physicalevent.FieldLat:
			values[i] = new(sql.NullFloat64)
		case physicalevent.FieldID, physicalevent.FieldLocation:
			values[i] = new(sql.NullString)
		case physicalevent.ForeignKeys[0]: // event_physical_event
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PhysicalEvent fields.
func (pe *PhysicalEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case physicalevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pe.ID = value.String
			}
		case physicalevent.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				pe.Lng = value.Float64
			}
		case physicalevent.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				pe.Lat = value.Float64
			}
		case physicalevent.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pe.Location = value.String
			}
		case physicalevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_physical_event", values[i])
			} else if value.Valid {
				pe.event_physical_event = new(string)
				*pe.event_physical_event = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PhysicalEvent.
// This includes values selected through modifiers, order, etc.
func (pe *PhysicalEvent) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the PhysicalEvent entity.
func (pe *PhysicalEvent) QueryEvent() *EventQuery {
	return NewPhysicalEventClient(pe.config).QueryEvent(pe)
}

// Update returns a builder for updating this PhysicalEvent.
// Note that you need to call PhysicalEvent.Unwrap() before calling this method if this PhysicalEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PhysicalEvent) Update() *PhysicalEventUpdateOne {
	return NewPhysicalEventClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PhysicalEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PhysicalEvent) Unwrap() *PhysicalEvent {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PhysicalEvent is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PhysicalEvent) String() string {
	var builder strings.Builder
	builder.WriteString("PhysicalEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", pe.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", pe.Lat))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pe.Location)
	builder.WriteByte(')')
	return builder.String()
}

// PhysicalEvents is a parsable slice of PhysicalEvent.
type PhysicalEvents []*PhysicalEvent
