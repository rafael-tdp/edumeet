// Code generated by ent, DO NOT EDIT.

package ent

import (
	"edumeet/ent/event"
	"edumeet/ent/remoteevent"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RemoteEvent is the model entity for the RemoteEvent schema.
type RemoteEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RemoteEventQuery when eager-loading is set.
	Edges              RemoteEventEdges `json:"edges"`
	event_remote_event *string
	selectValues       sql.SelectValues
}

// RemoteEventEdges holds the relations/edges for other nodes in the graph.
type RemoteEventEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RemoteEventEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RemoteEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case remoteevent.FieldID, remoteevent.FieldURL:
			values[i] = new(sql.NullString)
		case remoteevent.ForeignKeys[0]: // event_remote_event
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RemoteEvent fields.
func (re *RemoteEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case remoteevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				re.ID = value.String
			}
		case remoteevent.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				re.URL = value.String
			}
		case remoteevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_remote_event", values[i])
			} else if value.Valid {
				re.event_remote_event = new(string)
				*re.event_remote_event = value.String
			}
		default:
			re.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RemoteEvent.
// This includes values selected through modifiers, order, etc.
func (re *RemoteEvent) Value(name string) (ent.Value, error) {
	return re.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the RemoteEvent entity.
func (re *RemoteEvent) QueryEvent() *EventQuery {
	return NewRemoteEventClient(re.config).QueryEvent(re)
}

// Update returns a builder for updating this RemoteEvent.
// Note that you need to call RemoteEvent.Unwrap() before calling this method if this RemoteEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RemoteEvent) Update() *RemoteEventUpdateOne {
	return NewRemoteEventClient(re.config).UpdateOne(re)
}

// Unwrap unwraps the RemoteEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *RemoteEvent) Unwrap() *RemoteEvent {
	_tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RemoteEvent is not a transactional entity")
	}
	re.config.driver = _tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RemoteEvent) String() string {
	var builder strings.Builder
	builder.WriteString("RemoteEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", re.ID))
	builder.WriteString("url=")
	builder.WriteString(re.URL)
	builder.WriteByte(')')
	return builder.String()
}

// RemoteEvents is a parsable slice of RemoteEvent.
type RemoteEvents []*RemoteEvent
