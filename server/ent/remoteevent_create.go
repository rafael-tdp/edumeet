// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/event"
	"edumeet/ent/remoteevent"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RemoteEventCreate is the builder for creating a RemoteEvent entity.
type RemoteEventCreate struct {
	config
	mutation *RemoteEventMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (rec *RemoteEventCreate) SetURL(s string) *RemoteEventCreate {
	rec.mutation.SetURL(s)
	return rec
}

// SetID sets the "id" field.
func (rec *RemoteEventCreate) SetID(s string) *RemoteEventCreate {
	rec.mutation.SetID(s)
	return rec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rec *RemoteEventCreate) SetNillableID(s *string) *RemoteEventCreate {
	if s != nil {
		rec.SetID(*s)
	}
	return rec
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (rec *RemoteEventCreate) SetEventID(id string) *RemoteEventCreate {
	rec.mutation.SetEventID(id)
	return rec
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (rec *RemoteEventCreate) SetNillableEventID(id *string) *RemoteEventCreate {
	if id != nil {
		rec = rec.SetEventID(*id)
	}
	return rec
}

// SetEvent sets the "event" edge to the Event entity.
func (rec *RemoteEventCreate) SetEvent(e *Event) *RemoteEventCreate {
	return rec.SetEventID(e.ID)
}

// Mutation returns the RemoteEventMutation object of the builder.
func (rec *RemoteEventCreate) Mutation() *RemoteEventMutation {
	return rec.mutation
}

// Save creates the RemoteEvent in the database.
func (rec *RemoteEventCreate) Save(ctx context.Context) (*RemoteEvent, error) {
	rec.defaults()
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RemoteEventCreate) SaveX(ctx context.Context) *RemoteEvent {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RemoteEventCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RemoteEventCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *RemoteEventCreate) defaults() {
	if _, ok := rec.mutation.ID(); !ok {
		v := remoteevent.DefaultID()
		rec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RemoteEventCreate) check() error {
	if _, ok := rec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "RemoteEvent.url"`)}
	}
	return nil
}

func (rec *RemoteEventCreate) sqlSave(ctx context.Context) (*RemoteEvent, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RemoteEvent.ID type: %T", _spec.ID.Value)
		}
	}
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RemoteEventCreate) createSpec() (*RemoteEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &RemoteEvent{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(remoteevent.Table, sqlgraph.NewFieldSpec(remoteevent.FieldID, field.TypeString))
	)
	if id, ok := rec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rec.mutation.URL(); ok {
		_spec.SetField(remoteevent.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := rec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remoteevent.EventTable,
			Columns: []string{remoteevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_remote_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RemoteEventCreateBulk is the builder for creating many RemoteEvent entities in bulk.
type RemoteEventCreateBulk struct {
	config
	err      error
	builders []*RemoteEventCreate
}

// Save creates the RemoteEvent entities in the database.
func (recb *RemoteEventCreateBulk) Save(ctx context.Context) ([]*RemoteEvent, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RemoteEvent, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RemoteEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RemoteEventCreateBulk) SaveX(ctx context.Context) []*RemoteEvent {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RemoteEventCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RemoteEventCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}
