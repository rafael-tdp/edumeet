// Code generated by ent, DO NOT EDIT.

package badge

import (
	"edumeet/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldName, v))
}

// Svg applies equality check predicate on the "svg" field. It's identical to SvgEQ.
func Svg(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldSvg, v))
}

// NbRequirementEvent applies equality check predicate on the "nbRequirementEvent" field. It's identical to NbRequirementEventEQ.
func NbRequirementEvent(v int) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldNbRequirementEvent, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldName, v))
}

// SvgEQ applies the EQ predicate on the "svg" field.
func SvgEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldSvg, v))
}

// SvgNEQ applies the NEQ predicate on the "svg" field.
func SvgNEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldSvg, v))
}

// SvgIn applies the In predicate on the "svg" field.
func SvgIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldSvg, vs...))
}

// SvgNotIn applies the NotIn predicate on the "svg" field.
func SvgNotIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldSvg, vs...))
}

// SvgGT applies the GT predicate on the "svg" field.
func SvgGT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldSvg, v))
}

// SvgGTE applies the GTE predicate on the "svg" field.
func SvgGTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldSvg, v))
}

// SvgLT applies the LT predicate on the "svg" field.
func SvgLT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldSvg, v))
}

// SvgLTE applies the LTE predicate on the "svg" field.
func SvgLTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldSvg, v))
}

// SvgContains applies the Contains predicate on the "svg" field.
func SvgContains(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContains(FieldSvg, v))
}

// SvgHasPrefix applies the HasPrefix predicate on the "svg" field.
func SvgHasPrefix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasPrefix(FieldSvg, v))
}

// SvgHasSuffix applies the HasSuffix predicate on the "svg" field.
func SvgHasSuffix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasSuffix(FieldSvg, v))
}

// SvgEqualFold applies the EqualFold predicate on the "svg" field.
func SvgEqualFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldSvg, v))
}

// SvgContainsFold applies the ContainsFold predicate on the "svg" field.
func SvgContainsFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldSvg, v))
}

// NbRequirementEventEQ applies the EQ predicate on the "nbRequirementEvent" field.
func NbRequirementEventEQ(v int) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldNbRequirementEvent, v))
}

// NbRequirementEventNEQ applies the NEQ predicate on the "nbRequirementEvent" field.
func NbRequirementEventNEQ(v int) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldNbRequirementEvent, v))
}

// NbRequirementEventIn applies the In predicate on the "nbRequirementEvent" field.
func NbRequirementEventIn(vs ...int) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldNbRequirementEvent, vs...))
}

// NbRequirementEventNotIn applies the NotIn predicate on the "nbRequirementEvent" field.
func NbRequirementEventNotIn(vs ...int) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldNbRequirementEvent, vs...))
}

// NbRequirementEventGT applies the GT predicate on the "nbRequirementEvent" field.
func NbRequirementEventGT(v int) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldNbRequirementEvent, v))
}

// NbRequirementEventGTE applies the GTE predicate on the "nbRequirementEvent" field.
func NbRequirementEventGTE(v int) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldNbRequirementEvent, v))
}

// NbRequirementEventLT applies the LT predicate on the "nbRequirementEvent" field.
func NbRequirementEventLT(v int) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldNbRequirementEvent, v))
}

// NbRequirementEventLTE applies the LTE predicate on the "nbRequirementEvent" field.
func NbRequirementEventLTE(v int) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldNbRequirementEvent, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Badge {
	return predicate.Badge(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Badge {
	return predicate.Badge(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Badge {
	return predicate.Badge(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Badge {
	return predicate.Badge(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Badge {
	return predicate.Badge(sql.FieldContainsFold(FieldType, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Badge {
	return predicate.Badge(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Badge) predicate.Badge {
	return predicate.Badge(sql.NotPredicates(p))
}
