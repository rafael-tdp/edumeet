// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BadgesColumns holds the columns for the "badges" table.
	BadgesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "svg", Type: field.TypeString},
		{Name: "nb_requirement_event", Type: field.TypeInt},
		{Name: "type", Type: field.TypeString},
	}
	// BadgesTable holds the schema information for the "badges" table.
	BadgesTable = &schema.Table{
		Name:       "badges",
		Columns:    BadgesColumns,
		PrimaryKey: []*schema.Column{BadgesColumns[0]},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "path", Type: field.TypeString},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "nb_max_user", Type: field.TypeInt},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "is_private", Type: field.TypeBool, Default: false},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "invitation_link", Type: field.TypeString, Nullable: true},
		{Name: "user_events", Type: field.TypeString, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_users_events",
				Columns:    []*schema.Column{EventsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EventDocumentsColumns holds the columns for the "event_documents" table.
	EventDocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "document_event_documents", Type: field.TypeString, Nullable: true},
		{Name: "event_event_documents", Type: field.TypeString, Nullable: true},
	}
	// EventDocumentsTable holds the schema information for the "event_documents" table.
	EventDocumentsTable = &schema.Table{
		Name:       "event_documents",
		Columns:    EventDocumentsColumns,
		PrimaryKey: []*schema.Column{EventDocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_documents_documents_event_documents",
				Columns:    []*schema.Column{EventDocumentsColumns[2]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "event_documents_events_event_documents",
				Columns:    []*schema.Column{EventDocumentsColumns[3]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "content", Type: field.TypeString},
		{Name: "sent_at", Type: field.TypeTime},
		{Name: "event_messages", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "user_messages", Type: field.TypeString, Nullable: true},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_events_messages",
				Columns:    []*schema.Column{MessagesColumns[3]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "messages_users_messages",
				Columns:    []*schema.Column{MessagesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ParticipantsColumns holds the columns for the "participants" table.
	ParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeString},
		{Name: "requested_at", Type: field.TypeTime},
		{Name: "joined_at", Type: field.TypeTime, Nullable: true},
		{Name: "event_participants", Type: field.TypeString, Nullable: true},
		{Name: "user_participants", Type: field.TypeString, Nullable: true},
	}
	// ParticipantsTable holds the schema information for the "participants" table.
	ParticipantsTable = &schema.Table{
		Name:       "participants",
		Columns:    ParticipantsColumns,
		PrimaryKey: []*schema.Column{ParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "participants_events_participants",
				Columns:    []*schema.Column{ParticipantsColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "participants_users_participants",
				Columns:    []*schema.Column{ParticipantsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PhysicalEventsColumns holds the columns for the "physical_events" table.
	PhysicalEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "lng", Type: field.TypeFloat64},
		{Name: "lat", Type: field.TypeFloat64},
		{Name: "location", Type: field.TypeString},
		{Name: "event_physical_event", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// PhysicalEventsTable holds the schema information for the "physical_events" table.
	PhysicalEventsTable = &schema.Table{
		Name:       "physical_events",
		Columns:    PhysicalEventsColumns,
		PrimaryKey: []*schema.Column{PhysicalEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "physical_events_events_physical_event",
				Columns:    []*schema.Column{PhysicalEventsColumns[4]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RemoteEventsColumns holds the columns for the "remote_events" table.
	RemoteEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "url", Type: field.TypeString},
		{Name: "event_remote_event", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// RemoteEventsTable holds the schema information for the "remote_events" table.
	RemoteEventsTable = &schema.Table{
		Name:       "remote_events",
		Columns:    RemoteEventsColumns,
		PrimaryKey: []*schema.Column{RemoteEventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "remote_events_events_remote_event",
				Columns:    []*schema.Column{RemoteEventsColumns[2]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReportingsColumns holds the columns for the "reportings" table.
	ReportingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "reason", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "entity_id", Type: field.TypeString},
		{Name: "user_reports", Type: field.TypeString, Nullable: true},
	}
	// ReportingsTable holds the schema information for the "reportings" table.
	ReportingsTable = &schema.Table{
		Name:       "reportings",
		Columns:    ReportingsColumns,
		PrimaryKey: []*schema.Column{ReportingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reportings_users_reports",
				Columns:    []*schema.Column{ReportingsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SubjectsColumns holds the columns for the "subjects" table.
	SubjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// SubjectsTable holds the schema information for the "subjects" table.
	SubjectsTable = &schema.Table{
		Name:       "subjects",
		Columns:    SubjectsColumns,
		PrimaryKey: []*schema.Column{SubjectsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString},
		{Name: "lastname", Type: field.TypeString},
		{Name: "firstname", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "birth_date", Type: field.TypeTime},
		{Name: "bio", Type: field.TypeString, Nullable: true},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "activated", Type: field.TypeBool, Default: false},
		{Name: "report_number", Type: field.TypeInt, Default: 0},
		{Name: "lng", Type: field.TypeFloat64, Nullable: true},
		{Name: "lat", Type: field.TypeFloat64, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "code", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"SUPER ADMIN", "ADMIN", "USER"}, Default: "USER"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// EventSubjectsColumns holds the columns for the "event_subjects" table.
	EventSubjectsColumns = []*schema.Column{
		{Name: "event_id", Type: field.TypeString},
		{Name: "subject_id", Type: field.TypeString},
	}
	// EventSubjectsTable holds the schema information for the "event_subjects" table.
	EventSubjectsTable = &schema.Table{
		Name:       "event_subjects",
		Columns:    EventSubjectsColumns,
		PrimaryKey: []*schema.Column{EventSubjectsColumns[0], EventSubjectsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "event_subjects_event_id",
				Columns:    []*schema.Column{EventSubjectsColumns[0]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "event_subjects_subject_id",
				Columns:    []*schema.Column{EventSubjectsColumns[1]},
				RefColumns: []*schema.Column{SubjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MessageDocumentsColumns holds the columns for the "message_documents" table.
	MessageDocumentsColumns = []*schema.Column{
		{Name: "message_id", Type: field.TypeString},
		{Name: "document_id", Type: field.TypeString},
	}
	// MessageDocumentsTable holds the schema information for the "message_documents" table.
	MessageDocumentsTable = &schema.Table{
		Name:       "message_documents",
		Columns:    MessageDocumentsColumns,
		PrimaryKey: []*schema.Column{MessageDocumentsColumns[0], MessageDocumentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "message_documents_message_id",
				Columns:    []*schema.Column{MessageDocumentsColumns[0]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_documents_document_id",
				Columns:    []*schema.Column{MessageDocumentsColumns[1]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserBadgesColumns holds the columns for the "user_badges" table.
	UserBadgesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "badge_id", Type: field.TypeString},
	}
	// UserBadgesTable holds the schema information for the "user_badges" table.
	UserBadgesTable = &schema.Table{
		Name:       "user_badges",
		Columns:    UserBadgesColumns,
		PrimaryKey: []*schema.Column{UserBadgesColumns[0], UserBadgesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_badges_user_id",
				Columns:    []*schema.Column{UserBadgesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_badges_badge_id",
				Columns:    []*schema.Column{UserBadgesColumns[1]},
				RefColumns: []*schema.Column{BadgesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSubjectsColumns holds the columns for the "user_subjects" table.
	UserSubjectsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "subject_id", Type: field.TypeString},
	}
	// UserSubjectsTable holds the schema information for the "user_subjects" table.
	UserSubjectsTable = &schema.Table{
		Name:       "user_subjects",
		Columns:    UserSubjectsColumns,
		PrimaryKey: []*schema.Column{UserSubjectsColumns[0], UserSubjectsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_subjects_user_id",
				Columns:    []*schema.Column{UserSubjectsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_subjects_subject_id",
				Columns:    []*schema.Column{UserSubjectsColumns[1]},
				RefColumns: []*schema.Column{SubjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BadgesTable,
		DocumentsTable,
		EventsTable,
		EventDocumentsTable,
		MessagesTable,
		ParticipantsTable,
		PhysicalEventsTable,
		RemoteEventsTable,
		ReportingsTable,
		SubjectsTable,
		UsersTable,
		EventSubjectsTable,
		MessageDocumentsTable,
		UserBadgesTable,
		UserSubjectsTable,
	}
)

func init() {
	EventsTable.ForeignKeys[0].RefTable = UsersTable
	EventDocumentsTable.ForeignKeys[0].RefTable = DocumentsTable
	EventDocumentsTable.ForeignKeys[1].RefTable = EventsTable
	MessagesTable.ForeignKeys[0].RefTable = EventsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	ParticipantsTable.ForeignKeys[0].RefTable = EventsTable
	ParticipantsTable.ForeignKeys[1].RefTable = UsersTable
	PhysicalEventsTable.ForeignKeys[0].RefTable = EventsTable
	RemoteEventsTable.ForeignKeys[0].RefTable = EventsTable
	ReportingsTable.ForeignKeys[0].RefTable = UsersTable
	EventSubjectsTable.ForeignKeys[0].RefTable = EventsTable
	EventSubjectsTable.ForeignKeys[1].RefTable = SubjectsTable
	MessageDocumentsTable.ForeignKeys[0].RefTable = MessagesTable
	MessageDocumentsTable.ForeignKeys[1].RefTable = DocumentsTable
	UserBadgesTable.ForeignKeys[0].RefTable = UsersTable
	UserBadgesTable.ForeignKeys[1].RefTable = BadgesTable
	UserSubjectsTable.ForeignKeys[0].RefTable = UsersTable
	UserSubjectsTable.ForeignKeys[1].RefTable = SubjectsTable
}
