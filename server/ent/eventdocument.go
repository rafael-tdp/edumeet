// Code generated by ent, DO NOT EDIT.

package ent

import (
	"edumeet/ent/document"
	"edumeet/ent/event"
	"edumeet/ent/eventdocument"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventDocument is the model entity for the EventDocument schema.
type EventDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventDocumentQuery when eager-loading is set.
	Edges                    EventDocumentEdges `json:"edges"`
	document_event_documents *string
	event_event_documents    *string
	selectValues             sql.SelectValues
}

// EventDocumentEdges holds the relations/edges for other nodes in the graph.
type EventDocumentEdges struct {
	// Document holds the value of the document edge.
	Document *Document `json:"document,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventDocumentEdges) DocumentOrErr() (*Document, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: document.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventDocumentEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventDocument) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventdocument.FieldID, eventdocument.FieldType:
			values[i] = new(sql.NullString)
		case eventdocument.ForeignKeys[0]: // document_event_documents
			values[i] = new(sql.NullString)
		case eventdocument.ForeignKeys[1]: // event_event_documents
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventDocument fields.
func (ed *EventDocument) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventdocument.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ed.ID = value.String
			}
		case eventdocument.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ed.Type = value.String
			}
		case eventdocument.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_event_documents", values[i])
			} else if value.Valid {
				ed.document_event_documents = new(string)
				*ed.document_event_documents = value.String
			}
		case eventdocument.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_event_documents", values[i])
			} else if value.Valid {
				ed.event_event_documents = new(string)
				*ed.event_event_documents = value.String
			}
		default:
			ed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventDocument.
// This includes values selected through modifiers, order, etc.
func (ed *EventDocument) Value(name string) (ent.Value, error) {
	return ed.selectValues.Get(name)
}

// QueryDocument queries the "document" edge of the EventDocument entity.
func (ed *EventDocument) QueryDocument() *DocumentQuery {
	return NewEventDocumentClient(ed.config).QueryDocument(ed)
}

// QueryEvent queries the "event" edge of the EventDocument entity.
func (ed *EventDocument) QueryEvent() *EventQuery {
	return NewEventDocumentClient(ed.config).QueryEvent(ed)
}

// Update returns a builder for updating this EventDocument.
// Note that you need to call EventDocument.Unwrap() before calling this method if this EventDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (ed *EventDocument) Update() *EventDocumentUpdateOne {
	return NewEventDocumentClient(ed.config).UpdateOne(ed)
}

// Unwrap unwraps the EventDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ed *EventDocument) Unwrap() *EventDocument {
	_tx, ok := ed.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventDocument is not a transactional entity")
	}
	ed.config.driver = _tx.drv
	return ed
}

// String implements the fmt.Stringer.
func (ed *EventDocument) String() string {
	var builder strings.Builder
	builder.WriteString("EventDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ed.ID))
	builder.WriteString("type=")
	builder.WriteString(ed.Type)
	builder.WriteByte(')')
	return builder.String()
}

// EventDocuments is a parsable slice of EventDocument.
type EventDocuments []*EventDocument
