// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"edumeet/ent/document"
	"edumeet/ent/event"
	"edumeet/ent/eventdocument"
	"edumeet/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventDocumentUpdate is the builder for updating EventDocument entities.
type EventDocumentUpdate struct {
	config
	hooks    []Hook
	mutation *EventDocumentMutation
}

// Where appends a list predicates to the EventDocumentUpdate builder.
func (edu *EventDocumentUpdate) Where(ps ...predicate.EventDocument) *EventDocumentUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetType sets the "type" field.
func (edu *EventDocumentUpdate) SetType(s string) *EventDocumentUpdate {
	edu.mutation.SetType(s)
	return edu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (edu *EventDocumentUpdate) SetNillableType(s *string) *EventDocumentUpdate {
	if s != nil {
		edu.SetType(*s)
	}
	return edu
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (edu *EventDocumentUpdate) SetDocumentID(id string) *EventDocumentUpdate {
	edu.mutation.SetDocumentID(id)
	return edu
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (edu *EventDocumentUpdate) SetNillableDocumentID(id *string) *EventDocumentUpdate {
	if id != nil {
		edu = edu.SetDocumentID(*id)
	}
	return edu
}

// SetDocument sets the "document" edge to the Document entity.
func (edu *EventDocumentUpdate) SetDocument(d *Document) *EventDocumentUpdate {
	return edu.SetDocumentID(d.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (edu *EventDocumentUpdate) SetEventID(id string) *EventDocumentUpdate {
	edu.mutation.SetEventID(id)
	return edu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (edu *EventDocumentUpdate) SetNillableEventID(id *string) *EventDocumentUpdate {
	if id != nil {
		edu = edu.SetEventID(*id)
	}
	return edu
}

// SetEvent sets the "event" edge to the Event entity.
func (edu *EventDocumentUpdate) SetEvent(e *Event) *EventDocumentUpdate {
	return edu.SetEventID(e.ID)
}

// Mutation returns the EventDocumentMutation object of the builder.
func (edu *EventDocumentUpdate) Mutation() *EventDocumentMutation {
	return edu.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (edu *EventDocumentUpdate) ClearDocument() *EventDocumentUpdate {
	edu.mutation.ClearDocument()
	return edu
}

// ClearEvent clears the "event" edge to the Event entity.
func (edu *EventDocumentUpdate) ClearEvent() *EventDocumentUpdate {
	edu.mutation.ClearEvent()
	return edu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EventDocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EventDocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EventDocumentUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EventDocumentUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (edu *EventDocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventdocument.Table, eventdocument.Columns, sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.GetType(); ok {
		_spec.SetField(eventdocument.FieldType, field.TypeString, value)
	}
	if edu.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.DocumentTable,
			Columns: []string{eventdocument.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.DocumentTable,
			Columns: []string{eventdocument.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if edu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.EventTable,
			Columns: []string{eventdocument.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.EventTable,
			Columns: []string{eventdocument.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// EventDocumentUpdateOne is the builder for updating a single EventDocument entity.
type EventDocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventDocumentMutation
}

// SetType sets the "type" field.
func (eduo *EventDocumentUpdateOne) SetType(s string) *EventDocumentUpdateOne {
	eduo.mutation.SetType(s)
	return eduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eduo *EventDocumentUpdateOne) SetNillableType(s *string) *EventDocumentUpdateOne {
	if s != nil {
		eduo.SetType(*s)
	}
	return eduo
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (eduo *EventDocumentUpdateOne) SetDocumentID(id string) *EventDocumentUpdateOne {
	eduo.mutation.SetDocumentID(id)
	return eduo
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (eduo *EventDocumentUpdateOne) SetNillableDocumentID(id *string) *EventDocumentUpdateOne {
	if id != nil {
		eduo = eduo.SetDocumentID(*id)
	}
	return eduo
}

// SetDocument sets the "document" edge to the Document entity.
func (eduo *EventDocumentUpdateOne) SetDocument(d *Document) *EventDocumentUpdateOne {
	return eduo.SetDocumentID(d.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eduo *EventDocumentUpdateOne) SetEventID(id string) *EventDocumentUpdateOne {
	eduo.mutation.SetEventID(id)
	return eduo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eduo *EventDocumentUpdateOne) SetNillableEventID(id *string) *EventDocumentUpdateOne {
	if id != nil {
		eduo = eduo.SetEventID(*id)
	}
	return eduo
}

// SetEvent sets the "event" edge to the Event entity.
func (eduo *EventDocumentUpdateOne) SetEvent(e *Event) *EventDocumentUpdateOne {
	return eduo.SetEventID(e.ID)
}

// Mutation returns the EventDocumentMutation object of the builder.
func (eduo *EventDocumentUpdateOne) Mutation() *EventDocumentMutation {
	return eduo.mutation
}

// ClearDocument clears the "document" edge to the Document entity.
func (eduo *EventDocumentUpdateOne) ClearDocument() *EventDocumentUpdateOne {
	eduo.mutation.ClearDocument()
	return eduo
}

// ClearEvent clears the "event" edge to the Event entity.
func (eduo *EventDocumentUpdateOne) ClearEvent() *EventDocumentUpdateOne {
	eduo.mutation.ClearEvent()
	return eduo
}

// Where appends a list predicates to the EventDocumentUpdate builder.
func (eduo *EventDocumentUpdateOne) Where(ps ...predicate.EventDocument) *EventDocumentUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EventDocumentUpdateOne) Select(field string, fields ...string) *EventDocumentUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EventDocument entity.
func (eduo *EventDocumentUpdateOne) Save(ctx context.Context) (*EventDocument, error) {
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EventDocumentUpdateOne) SaveX(ctx context.Context) *EventDocument {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EventDocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EventDocumentUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eduo *EventDocumentUpdateOne) sqlSave(ctx context.Context) (_node *EventDocument, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventdocument.Table, eventdocument.Columns, sqlgraph.NewFieldSpec(eventdocument.FieldID, field.TypeString))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventDocument.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventdocument.FieldID)
		for _, f := range fields {
			if !eventdocument.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventdocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.GetType(); ok {
		_spec.SetField(eventdocument.FieldType, field.TypeString, value)
	}
	if eduo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.DocumentTable,
			Columns: []string{eventdocument.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.DocumentTable,
			Columns: []string{eventdocument.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eduo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.EventTable,
			Columns: []string{eventdocument.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventdocument.EventTable,
			Columns: []string{eventdocument.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventDocument{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
